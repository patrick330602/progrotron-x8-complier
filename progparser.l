/***********************************************************
 * progparser.l
 * 
 ***********************************************************/
/* -- PREAMBLE  ------------------------------------------ */
%{
#include <iostream>
#include <iomanip>
#include "hint.tab.h"      // file generated by Bison
using namespace std;

int line_num = 1;          // to keep line numbers

    /* --- FUNCTION PROTOTYPES */
void writeToken(const char* toktype);

%}

    /* --- OPTIONS */
%option noyywrap

    /* --- DEFINITIONS */
WHITE      [ \t]
DIGIT      [0-9]
ALPHA      [a-zA-Z]
ALPHANUM   [a-zA-Z0-9]

%%   /* -- REGULAR EXPRESSIONS ---------------------------- */

{WHITE}    ;                /* eat white space */
\n         { line_num++; }  /* count line numbers */

    /* --- Keyword Tokens */

";"        { return K_SEMICOLON; }
":-"       { return K_ASSIGN; }
"("        { return K_LPAREN; }
")"        { return K_RPAREN; }
"write"    { return K_WRITE; }
    /* --- Complex Tokens */
{ALPHA}{ALPHANUM}*         { writeToken("T_IDENT"); return T_IDENT; }
[+-]?{DIGIT}+              { writeToken("T_INTEGER"); return T_INTEGER; }
[+-]?{DIGIT}+\.{DIGIT}+    { writeToken("T_DECIMAL"); return T_DECIMAL; }


%%   /* -- CODA  -------------------------------------- */

// Purpose: prints that a complex token was found
void writeToken(const char* toktype)
{
    cout << "TOKEN: ";
    cout << left << setw(14) << toktype;
    cout << "LEXEME: " << yytext << endl;
}
